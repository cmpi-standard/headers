/* ------------------------------------------------------------------------- */
/* Dummy header file defining the module structure for Doxygen.              */
/* Because it has the extension .dox, it is parsed, but does not show up in  */
/* the Files tab of the HTML output.                                         */
/* ------------------------------------------------------------------------- */

/**
 * @page added200 Added in CMPI 2.0
 * @brief Entities that were added in CMPI 2.0
 */

/**
 * @page added210 Added in CMPI 2.1
 * @brief Entities that were added in CMPI 2.1
 */

/**
 * @page changed210 Changed in CMPI 2.1
 * @brief Entities that were changed in CMPI 2.1
 *
 * These are not believed to be incompatibilities for MIs conforming to earlier
 * versions of CMPI. New requirements for MBs are not considered
 * incompatibilities.
 */

/**
 * @page incompatible210 Incompatibilities in CMPI 2.1
 * @brief Entities that were changed incompatibly in CMPI 2.1
 *
 * These only include incompatibilities for MIs conforming to earlier versions
 * of CMPI. New requirements for MBs are not considered incompatibilities.
 */

/**
 * @page required200 Required since CMPI 2.0
 * @brief Entities that are required to be supported since CMPI 2.0
 */

/**
 * @page required210 Required since CMPI 2.1
 * @brief Entities that are required to be supported since CMPI 2.1
 */

/**
 * @page capread Basic Read capability
 * @anchor cap-read
 * @brief Entities that are part of the Basic Read capability
 *
 * This capability is optional to be supported.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_BasicRead test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 */

/**
 * @page capwrite Basic Write capability
 * @anchor cap-write
 * @brief Entities that are part of the Basic Write capability
 *
 * This capability is optional to be supported.
 * It depends on the @ref cap-read "Basic Read" capability.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_BasicWrite test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 */

/**
 * @page capmanipulation Instance Manipulation capability
 * @anchor cap-manipulation
 * @brief Entities that are part of the Instance Manipulation capability
 *
 * This capability is optional to be supported.
 * It depends on the @ref cap-write "Basic Write" capability.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_InstanceManipulation
 * test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 */

/**
 * @page capassociations Association Traversal capability
 * @anchor cap-associations
 * @brief Entities that are part of the Association Traversal capability
 *
 * This capability is optional to be supported.
 * It depends on the @ref cap-read "Basic Read" capability.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_AssociationTraversal
 * test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 */

/**
 * @page capqueryexec Query Execution capability
 * @anchor cap-queryexec
 * @brief Entities that are part of the Query Execution capability
 *
 * This capability is optional to be supported.
 * It depends on the @ref cap-read "Basic Read" capability.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_QueryExecution test
 * mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 */

/**
 * @page capquerynorm Query Normalization capability
 * @anchor cap-querynorm
 * @brief Entities that are part of the Query Normalization capability
 *
 * This capability is optional to be supported.
 * It depends on the @ref cap-queryexec "Query Execution" capability.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_QueryNormalization
 * test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 */

/**
 * @page capqualifiers Basic Qualifier capability
 * @anchor cap-qualifiers
 * @brief Entities that are part of the Basic Qualifier capability
 *
 * This capability is optional to be supported.
 * It depends on the @ref cap-manipulation "Instance Manipulation" capability.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_BasicQualifierSupport
 * test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 */

/**
 * @page capindications Indications capability
 * @anchor cap-indications
 * @brief Entities that are part of the Indications capability
 *
 * This capability is optional to be supported.
 * It depends on the @ref cap-read "Basic Read" capability.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_Indications test
 * mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 */

/**
 * @page capopsys OS Encapsulation Services capability
 * @anchor cap-opsys
 * @brief Entities that are part of the OS Encapsulation Services capability
 *
 * This capability is required to be supported.
 *
 * As a result, detecting its support from CMPIBrokerFT.brokerCapabilities using
 * the @ref CMPI_MB_OSEncapsulationSupport test mask will always yield
 * supported.
 *
 * The entities in the following list shall be supported.
 *
 * @required200
 */

/**
 * @page capmemory Memory Enhancement Services capability
 * @anchor cap-memory
 * @brief Entities that are part of the Memory Enhancement Services MB
 *     Capability
 *
 * This capability is optional to be supported.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref
 * CMPI_MB_Supports_MemEnhancements test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 *
 * @added200
 */

/**
 * @page caperrors Extended Errors capability
 * @anchor cap-errors
 * @brief Entities that are part of the Extended Errors capability
 *
 * This capability is required to be supported.
 *
 * As a result, detecting its support from CMPIBrokerFT.brokerCapabilities using
 * the @ref CMPI_MB_Supports_Extended_Error test mask will always yield
 * supported.
 *
 * The entities in the following list shall be supported.
 *
 * @added200
 * @required210
 */

/**
 * @page caplogging Logging capability
 * @anchor cap-logging
 * @brief Entities that are part of the Logging capability
 *
 * This capability is optional to be supported.
 *
 * Since CMPI 2.1, support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_Logging test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 *
 * @changed210 In CMPI 2.1, added the @ref CMPI_MB_Logging test mask;
 *     the capability itself existed since CMPI 1.0.
 */

/**
 * @page captracing Tracing capability
 * @anchor cap-tracing
 * @brief Entities that are part of the Tracing capability
 *
 * This capability is optional to be supported.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_Tracing test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 *
 * @changed210 In CMPI 2.1, added the @ref CMPI_MB_Tracing test mask;
 *     the capability itself existed since CMPI 1.0.
 */

/**
 * @page capfiltering Property Filtering capability
 * @anchor cap-filtering
 * @brief Entities that are part of the Property Filtering capability
 *
 * This capability is optional to be supported.
 * It depends on the @ref cap-read "Basic Read" capability.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_PropertyFiltering
 * test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 *
 * @changed210 In CMPI 2.1, added the @ref CMPI_MB_PropertyFiltering test mask;
 *     the capability itself existed since CMPI 1.0.
 */

/**
 * @page capcodepage Codepage Conversion capability
 * @anchor cap-codepage
 * @brief Entities that are part of the Codepage Conversion capability
 *
 * This capability is optional to be supported.
 *
 * Support for this capability can be detected from
 * CMPIBrokerFT.brokerCapabilities using the @ref CMPI_MB_CodepageConversion
 * test mask.
 *
 * If this capability is supported, the entities in the following list shall be
 * supported; otherwise, they shall not be supported.
 *
 * @added210
 */

/**
 * @page captranslation Message Translation capability
 * @anchor cap-translation
 * @brief Entities that are part of the Message Translation capability
 *
 * This capability is optional to be supported.
 *
 * Support for this capability cannot be detected from
 * CMPIBrokerFT.brokerCapabilities.
 *
 * The entities in the following list shall be supported (even when this
 * capability is not supported). Supporting this capability results in specific
 * behavior of these functions; these functions have a default behavior if
 * this capability is not supported.
 */

/**
 * @page capcontext Context Data capability
 * @anchor cap-context
 * @brief Entities that are part of the Context Data capability
 *
 * This capability is required to be supported.
 *
 * Support for this capability cannot be detected from
 * CMPIBrokerFT.brokerCapabilities.
 *
 * The entities in the following list shall be supported.
 *
 * @required210
 */

/**
 * @page platformspecific Platform-specific Definitions
 * @brief Definitions that depend on the compile platform
 *
 * Some definitions in the CMPI header files depend on the specified platform
 * (see @ref sym-platform).
 *
 * This online documentation is generated for the platform
 * CMPI_PLATFORM_LINUX_GENERIC_GNU.
 *
 * Platform dependencies are mentioned where applicable, but those descriptions
 * may not be fully specific as to what the exact changes for each platform are.
 * For details, the respective CMPI header file needs to be examined.
 */

/**
 * @page cxxspecific C/C++-specific Definitions
 * @brief Definitions that depend on compiling for C vs. C++
 *
 * Some definitions in the CMPI header files depend on whether they are compiled
 * for C or for C++.
 *
 * The code shown in this online documentation is for C++.
 *
 * Such dependencies are mentioned where applicable, but those descriptions
 * may not be fully specific as to what the exact changes are.
 * For details, the respective CMPI header file needs to be examined.
 */

/**
 * @page statusopenpegasus Status for OpenPegasus
 * @brief Implementation and/or test status for OpenPegasus
 *
 * This page lists the implementation and/or test status of @ref
 * convenience-func "CMPI convenience functions" for the OpenPegasus MB.
 */

// Important: If you add page sections for further MBs here, you also need to
// add the corresponding alias definitions in Doxyfile (search for status{xxx}).

/**
@defgroup data-types Data Types (Subclause 5)
@{
  @defgroup type-codepage-id Codepage Conversion (Subclause 5.2.2)
  @{
  @}
  @defgroup types-cim-types C Data Types for CIM Data Types (Subclause 5.4)
  @{
  @}
  @defgroup types-misc CMPI Miscellaneous Data Types (Subclause 5.5)
  @{
    @defgroup type-valueptr CMPIValuePtr
    @{
    @}
*/
#ifdef CMPI_DEFINE_CMPISelectCondType
/**
    @defgroup type-select-cond-type CMPISelectCondType
    @{
    @}
*/
#endif
/**
  @}
  @defgroup types-data-items CMPI Data Items (Subclause 5.6)
  @{
    @defgroup type-data CMPIData
    @{
    @}
    @defgroup type-type CMPIType
    @{
    @}
    @defgroup type-value-state CMPIValueState
    @{
    @}
    @defgroup type-value CMPIValue
    @{
    @}
    @defgroup type-pred-op CMPIPredOp
    @{
    @}
    @defgroup type-count CMPICount
    @{
    @}
    @defgroup type-msg-file-handle CMPIMsgFileHandle
    @{
    @}
    @defgroup type-gc-stat CMPIGcStat
    @{
    @}
    @defgroup type-version CMPIVersion
    @{
    @}
  @}
  @defgroup type-status CMPIStatus (Subclause 5.8)
  @{
  @}
  @defgroup type-rc CMPIRc (Return Codes) (Subclause 5.9)
  @{
  @}
  @defgroup type-severity CMPISeverity (Severity Codes) (Subclause 5.10)
  @{
  @}
  @defgroup type-level CMPILevel (Trace Levels) (Subclause 5.11)
  @{
  @}
  @defgroup type-error-type CMPIErrorType (Extended Error Types) \
    (Subclause 5.12)
  @{
  @}
  @defgroup type-error-severity CMPIErrorSeverity (Extended Error Severity \
    Levels) (Subclause 5.13)
  @{
  @}
  @defgroup type-error-probable-cause CMPIErrorProbableCause (Extended Error \
    Probable Causes) (Subclause 5.14)
  @{
  @}
  @defgroup type-error-src-format CMPIErrorSrcFormat (Extended Error Source \
    Formats) (Subclause 5.15)
  @{
  @}
  @defgroup type-flags CMPIFlags (Subclause 5.16)
  @{
  @}
@}
@defgroup mi-functions MI Functions (Subclause 6)
@{
  @defgroup mi-factory MI Factory Functions (Subclause 6.2)
  @{
  @}
  @defgroup instance-mi Instance MI Functions (Subclause 6.3)
  @{
  @}
  @defgroup association-mi Association MI Functions (Subclause 6.4)
  @{
  @}
  @defgroup method-mi Method MI Functions (Subclause 6.5)
  @{
  @}
  @defgroup indication-mi Indication MI support (Subclause 6.6)
  @{
  @}
  @defgroup property-mi Property MI functions (Subclause 6.7) (Deprecated)
  @{
  @}
@}
@defgroup mb-capabilities MB Capabilities (Subclause 7.1)
@{
@}
@defgroup mb-edt MB Encapsulated Data Type Support (Subclause 8)
@{
  @defgroup edt-context CMPIContext Support (Subclause 8.1)
  @{
    @defgroup def-context-fieldnames Names of CMPIContext fields
    @{
    @}
  @}
  @defgroup edt-result CMPIResult Support (Subclause 8.2)
  @{
  @}
  @defgroup edt-string CMPIString Support (Subclause 8.3)
  @{
  @}
  @defgroup edt-array CMPIArray Support (Subclause 8.4)
  @{
  @}
  @defgroup edt-enumeration CMPIEnumeration Support (Subclause 8.5)
  @{
  @}
  @defgroup edt-instance CMPIInstance Support (Subclause 8.6)
  @{
  @}
  @defgroup edt-objectpath CMPIObjectPath Support (Subclause 8.7)
  @{
  @}
  @defgroup edt-args CMPIArgs Support (Subclause 8.8)
  @{
  @}
  @defgroup edt-datetime CMPIDateTime Support (Subclause 8.9)
  @{
  @}
  @defgroup edt-selectexp CMPISelectExp Support (Subclause 8.10)
  @{
  @}
  @defgroup edt-selectcond CMPISelectCond Support (Subclause 8.11)
  @{
  @}
  @defgroup edt-subcond CMPISubCond Support (Subclause 8.12)
  @{
  @}
  @defgroup edt-predicate CMPIPredicate Support (Subclause 8.13)
  @{
  @}
  @defgroup edt-error CMPIError Support (Subclause 8.14)
  @{
  @}
  @defgroup edt-propertylist CMPIPropertyList Support (Subclause 8.15)
  @{
  @}
  @defgroup edt-enumerationfilter CMPIEnumerationFilter Support (Subclause 8.16)
  @{
  @}
@}
@defgroup mb-services MB Services (Subclause 9)
@{
  @defgroup brokerenc-factory Factory Services (Subclause 9.1)
  @{
  @}
  @defgroup brokerenc-misc Miscellaneous Services (Subclause 9.1)
  @{
  @}
  @defgroup mb-tables CMPIBroker and its MB Function Tables (Subclause 9.2)
  @{
  @}
  @defgroup broker-indications Indications Services (Subclause 9.3)
  @{
  @}
  @defgroup broker-client Client Services ("up-calls") (Subclause 9.4 - 9.11)
  @{
  @}
  @defgroup qualifier-services Qualifier Services (Subclause 9.12)
  @{
  @}
  @defgroup broker-thread-reg Thread Registration Services (Subclause 9.13)
  @{
  @}
  @defgroup brokerext-lib OS Encapsulation Services - Library Resolution \
    (Subclause 9.14)
  @{
  @}
  @defgroup brokerext-thread OS Encapsulation Services - POSIX-conformant \
    Threads (Subclause 9.14)
  @{
  @}
  @defgroup brokerext-mutex OS Encapsulation Services - POSIX-conformant \
    Mutexes (Subclause 9.14)
  @{
  @}
  @defgroup brokerext-condition OS Encapsulation Services - POSIX-conformant \
    Conditions (Subclause 9.14)
  @{
  @}
  @defgroup brokermem-all Memory Enhancement Services (Subclause 9.15)
  @{
  @}
@}
@defgroup symbols Preprocessor Symbols
@{
  @defgroup symbols-user Symbols definable by the CMPI user
  @{
    These symbols can be defined by the user of the CMPI header files.

    @defgroup sym-platform CMPI_PLATFORM_\<xxx\>
    @{
      @brief Compile platform for CMPI.
    @}
    @defgroup sym-version CMPI_VERSION
    @{
      @brief CMPI version that is implemented.
    @}
    @defgroup sym-inline CMPI_INLINE and CMPI_NO_INLINE
    @{
      @brief Symbols controlling the definition of convenience functions.
    @}
  @}
  @defgroup symbols-versioning Symbols related to CMPI versioning
  @{
    @defgroup sym-version-nnn CMPIVersion\<NNN\>
    @{
      @brief Numeric CMPI version numbers.

      Note: Historical CMPI levels (before the first CMPI Standard, e.g.
      86, 90) are not supported by this header file.
    @}
    @defgroup sym-current-version CMPICurrentVersion
    @{
      @brief Current CMPI version of the header files.
    @}
    @defgroup sym-ver-nnn CMPI_VER_\<NNN\>
    @{
      @brief Tests for CMPI version dependent features.

      These symbols are used by the CMPI headers and can be used by MB or MI
      implementations supporting multiple CMPI versions, to test whether CMPI
      version dependent features should be made available, given the
      implemented version defined by @ref CMPI_VERSION.

      The term *available* as used here means that the feature is defined in
      the header files and subsequently can be supported in the MB or MI
      implementation.

      A symbol for a particular version (e.g. @ref CMPI_VER_200) is defined if
      its version is lower than or equal to the CMPI version that is implemented
      (as indicated by @ref CMPI_VERSION). Otherwise, it is undefined.

      This allows a feature that was introduced in a particular CMPI version
      to be defined like in the following example:

<pre>
\#ifdef CMPI_VER_200
// definition or use of feature that was added in CMPI 2.0.0
\#endif
</pre>
    @}
  @}
  @defgroup symbols-os-encaps Symbols related to OS Encapsulation Services
  @{
    @defgroup sym-thread-type CMPI_THREAD_TYPE
    @{
    @}
    @defgroup sym-thread-return CMPI_THREAD_RETURN
    @{
    @}
    @defgroup sym-thread-cdecl CMPI_THREAD_CDECL
    @{
    @}
    @defgroup sym-thread-key-type CMPI_THREAD_KEY_TYPE
    @{
    @}
    @defgroup sym-mutex-type CMPI_MUTEX_TYPE
    @{
    @}
    @defgroup sym-cond-type CMPI_COND_TYPE
    @{
    @}
  @}
  @defgroup symbols-export-import Symbols for exporting and importing symbols
  @{
    @defgroup sym-export CMPI_EXPORT
    @{
    @}
    @defgroup sym-import CMPI_IMPORT
    @{
    @}
    @defgroup sym-extern-c CMPI_EXTERN_C
    @{
    @}
  @}
@}
@defgroup convenience-func CMPI Convenience Functions
@{
  @defgroup convenience-func-broker For MB Functions in Broker Function Tables
  @{
  @}
  @defgroup convenience-func-edt For MB Functions of Encapsulated Data Types
  @{
    @defgroup convenience-func-edt-context CMPIContext Support
    @{
    @}
    @defgroup convenience-func-edt-result CMPIResult Support
    @{
    @}
    @defgroup convenience-func-edt-string CMPIString Support
    @{
    @}
    @defgroup convenience-func-edt-array CMPIArray Support
    @{
    @}
    @defgroup convenience-func-edt-enumeration CMPIEnumeration Support
    @{
    @}
    @defgroup convenience-func-edt-instance CMPIInstance Support
    @{
    @}
    @defgroup convenience-func-edt-objectpath CMPIObjectPath Support
    @{
    @}
    @defgroup convenience-func-edt-args CMPIArgs Support
    @{
    @}
    @defgroup convenience-func-edt-datetime CMPIDateTime Support
    @{
    @}
    @defgroup convenience-func-edt-selectexp CMPISelectExp Support
    @{
    @}
    @defgroup convenience-func-edt-selectcond CMPISelectCond Support
    @{
    @}
    @defgroup convenience-func-edt-subcond CMPISubCond Support
    @{
    @}
    @defgroup convenience-func-edt-predicate CMPIPredicate Support
    @{
    @}
    @defgroup convenience-func-edt-error CMPIError Support
    @{
    @}
    @defgroup convenience-func-edt-propertylist CMPIPropertyList Support
    @{
    @}
    @defgroup convenience-func-edt-enumerationfilter CMPIEnumerationFilter \
    Support
    @{
    @}
  @}
  @defgroup convenience-func-helper Helper Functions and Macros
  @{
  @}
  @defgroup convenience-func-mi-factory-stubs MI Factory Stubs
  @{
  @}
@}
*/
